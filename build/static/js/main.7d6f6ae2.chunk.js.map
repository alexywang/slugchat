{"version":3,"sources":["logo.svg","Components/Chat.js","Components/Lobby.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","messages","typers","myHandle","myMessage","endpoint","onMessageReceived","bind","assertThisInitialized","onTypingReceived","onHandleBoxChange","onMessageBoxChange","onMessageBoxSubmit","leaveAndDisconnect","response","oldMessages","newMessages","concat","toConsumableArray","setState","newTypers","filter","typer","handle","typerHandle","oldTypers","indexOf","event","target","value","room","chatSocket","emit","roomid","id","_this$state","_this$props","user","length","text","name","preventDefault","_this$props2","onLeaveRoom","disconnect","_this2","_this$props3","socketIOClient","on","_ref","message","window","addEventListener","console","log","_this$state2","react_default","a","createElement","className","Chat_Button","onClick","Chat_MessageDisplay","Chat_DynamicList","list","Chat_HandleBox","onChange","Chat_MessageBox","onSubmit","Component","MessageDisplay","map","item","key","MessageBox","_ref2","children","type","placeholder","HandleBox","_ref3","DynamicList","_ref4","connector","aList","asString","i","listToString","Button","_ref5","Lobby","rooms","onCreateRoom","capacity","alert","onRoomJoin","lobbySocket","roomList","Lobby_RoomList","Lobby_CreateRoom","RoomList","aRoom","Lobby_Room","Room","users","usernameList","capacityStyle","backgroundColor","Lobby_HoverList","style","HoverList","CreateRoom","_this3","undefined","_this4","App","require","joinedRooms","Math","random","usernameInput","addRoom","leaveRoom","onUsernameSubmit","onUsernameChange","newUser","newRoom","oldRooms","find","newRooms","targetRoom","Components_Chat","renderChat","Components_Lobby","renderAllChats","App_TextInput","TextInput","Boolean","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d6f6ae2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {Component} from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport '../css/Chat.css';\r\nimport { arrayExpression } from '@babel/types';\r\n\r\nclass Chat extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            messages: [],\r\n            typers: [], \r\n            myHandle: \"\",\r\n            myMessage: \"\",\r\n            endpoint: \"/\",\r\n        }\r\n\r\n        this.onMessageReceived = this.onMessageReceived.bind(this);\r\n        this.onTypingReceived = this.onTypingReceived.bind(this);\r\n        this.onHandleBoxChange = this.onHandleBoxChange.bind(this);\r\n        this.onMessageBoxChange = this.onMessageBoxChange.bind(this);\r\n        this.onMessageBoxSubmit = this.onMessageBoxSubmit.bind(this);\r\n        this.leaveAndDisconnect = this.leaveAndDisconnect.bind(this);\r\n    }\r\n\r\n    // Add new message to list, and remove the message's handle from the typer list.\r\n    onMessageReceived(response){\r\n        const messageHandleMismatch = typer => response.handle !== typer;\r\n        \r\n        //Append message to the current list of messages. \r\n        const oldMessages = this.state.messages;\r\n        const newMessages = [...oldMessages, response]; \r\n        this.setState({messages: newMessages});\r\n\r\n        //Remove the sender from the typing list. \r\n        const oldTypers = this.state.typers;\r\n        const newTypers = oldTypers.filter(messageHandleMismatch);\r\n        this.setState({typers: newTypers});\r\n    }\r\n\r\n    // Add the new typer handle to the typer list if they aren't there already. \r\n    onTypingReceived(typerHandle){\r\n        //Append the new typer to the list \r\n        const oldTypers = this.state.typers;\r\n        const newTypers = oldTypers.indexOf(typerHandle) === -1 ? [...oldTypers, typerHandle] : oldTypers;\r\n        this.setState({typers: newTypers});\r\n    }\r\n\r\n    // Update the state of my handle.\r\n    onHandleBoxChange(event){\r\n        this.setState({myHandle: event.target.value});\r\n    }\r\n\r\n    // Register self as a typer with the server\r\n    onMessageBoxChange(event){\r\n        const {myHandle} = this.state;\r\n        const {room} = this.props;\r\n        this.chatSocket.emit('typing', {\r\n            roomid: room.id,\r\n            typer: myHandle\r\n        }); // Typing event to be emitted to the other users\r\n        this.setState({myMessage: event.target.value});\r\n    }\r\n\r\n    // Submit a message to the server. \r\n    onMessageBoxSubmit(event){\r\n        const{myHandle, myMessage, } = this.state;\r\n        const{room, user} = this.props;\r\n\r\n        if(myMessage.length !== 0 && myHandle.length !== 0)\r\n        {\r\n            this.chatSocket.emit('message', {\r\n                roomid: room.id,\r\n                text: myMessage,\r\n                handle: user.name + '@' + myHandle\r\n            });\r\n            this.setState({myMessage: \"\"});\r\n        }\r\n        \r\n        event.preventDefault();\r\n    }\r\n    \r\n    leaveAndDisconnect(){\r\n        const {onLeaveRoom, room} = this.props;\r\n        onLeaveRoom(room);\r\n        //Disconnect my socket\r\n        this.chatSocket.disconnect();\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        const {endpoint} = this.state;\r\n        const {room, user} = this.props;\r\n\r\n\r\n        // Connect and define listeners\r\n        this.chatSocket = socketIOClient(endpoint+'/chats');\r\n        this.chatSocket.emit('joinRoom', {\r\n            roomid: room.id,\r\n            user: user\r\n        });\r\n\r\n        this.chatSocket.on('joinRoom', ({user}) =>{\r\n            //TODO: Display notification for other users joining. \r\n        })\r\n\r\n        this.chatSocket.on('message', (message) => { // Receiving a message\r\n            this.onMessageReceived(message);\r\n        });\r\n        \r\n        this.chatSocket.on('typing', (typer) => { // Receiving a new typer list\r\n            this.onTypingReceived(typer);\r\n        });\r\n\r\n        this.setState({messages: room.messages});\r\n\r\n        // Listen for when the user closes the window to remove them from serverside user lists\r\n        window.addEventListener('beforeunload', (event) => {\r\n            console.log('unloading');\r\n            this.chatSocket.emit('unloading', {\r\n                room: this.room.id,\r\n                user: this.user\r\n            });\r\n        });\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        const {messages, typers, myHandle, myMessage} = this.state;\r\n        const {room} = this.props;\r\n        return (\r\n            <div className=\"Chat\">\r\n                <Button onClick = {this.leaveAndDisconnect}>X</Button>\r\n                <center><h1>{room.name}</h1></center>\r\n                <MessageDisplay messages={messages} />\r\n                <DynamicList list={typers}/>\r\n                <HandleBox value={myHandle} onChange={this.onHandleBoxChange}></HandleBox>\r\n                <MessageBox value={myMessage} onChange={this.onMessageBoxChange} onSubmit={this.onMessageBoxSubmit}>Send </MessageBox>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MessageDisplay extends Component{\r\n    \r\n    render(){\r\n        const {messages} = this.props;\r\n\r\n        return (\r\n            <div className=\"MessageDisplay\">\r\n                {messages.map(item => \r\n                    <div key={item.handle+\" \"+item.text}id=\"message\">\r\n                       <p> <span id=\"messageHandle\">{item.handle}: </span> <span id=\"messageText\">{item.text}</span> </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n    const MessageBox = ({value, onChange, onSubmit, children}) => {\r\n    return (\r\n        <form className=\"MessageBox\" onSubmit = {onSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                onChange={onChange}\r\n                value={value}\r\n                placeholder=\"Message\"\r\n            />\r\n            <button type = \"submit\">\r\n                {children}\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst HandleBox = ({value, onChange, children}) => {\r\n    return (\r\n        <input type=\"text\" className=\"HandleBox\" onChange={onChange} value={value} placeholder=\"Handle\">{children}</input>\r\n    )\r\n}\r\n\r\nconst DynamicList = ({list}) => {\r\n    const listToString = (aList) => {\r\n        let asString = '';\r\n        if(aList.length === 0) return ''; \r\n        else{\r\n            for(let i = 0; i < aList.length-1; i ++){\r\n                asString += `${aList[i]}, `\r\n            }\r\n            asString += aList[aList.length-1];\r\n        }\r\n        return asString;\r\n    }\r\n\r\n    let connector = list.length > 1 ? 'are' : 'is';\r\n    return(\r\n        <div className=\"DynamicList\">\r\n            <p>\r\n                {list.length > 0 ? listToString(list) +` ${connector} typing...` : ''}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Button = ({onClick, children}) => {\r\n    return (\r\n        <button onClick= {onClick}>\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nexport default Chat;\r\nexport {\r\n    \r\n}","import React, {Component} from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nclass Lobby extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n            rooms: [],\r\n            endpoint: '/'\r\n        }\r\n\r\n        this.onCreateRoom = this.onCreateRoom.bind(this);\r\n    }\r\n\r\n    onCreateRoom(event, name, capacity){\r\n        event.preventDefault();\r\n\r\n        if(!name || !capacity){\r\n            return;\r\n        }\r\n        if(capacity > 100 || capacity < 2){\r\n            window.alert('Capacity must be between 2 and 100');\r\n        }\r\n        console.log(name);\r\n        console.log(capacity);\r\n        const {onRoomJoin} = this.props;\r\n        // Tell server to create the room.\r\n        this.chatSocket.emit('createRoom', {\r\n            name: name,\r\n            capacity: capacity\r\n        });\r\n\r\n        this.chatSocket.on('newRoomReady', room => {\r\n            onRoomJoin(room);\r\n        });\r\n\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const {endpoint} = this.state;\r\n        \r\n        // Connect\r\n        this.lobbySocket = socketIOClient(endpoint + '/lobby');\r\n        this.chatSocket = socketIOClient(endpoint + '/chats');\r\n        \r\n        // Listen\r\n        this.lobbySocket.on('roomList', roomList => { // Reflect rooms stored on server.\r\n            console.log('Receiving room list...');\r\n            this.setState({rooms: roomList});\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const {onRoomJoin} = this.props;\r\n        return(\r\n            <div className=\"Lobby\">\r\n                <RoomList rooms={this.state.rooms} onRoomJoin={onRoomJoin}/>\r\n                <CreateRoom\r\n                    onCreateRoom = {this.onCreateRoom}\r\n                    \r\n                >\r\n                    Create Room\r\n                </CreateRoom>\r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\n\r\nconst RoomList = ({rooms, onRoomJoin}) => {\r\n    return (\r\n        <div className=\"RoomList\">\r\n            {\r\n                rooms.map(aRoom =>\r\n                    <Room key={aRoom.id} room={aRoom} onRoomJoin = {() => onRoomJoin(aRoom)}>\r\n                        Join\r\n                    </Room>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Room = ({room, onRoomJoin, children}) => {\r\n    const {name, capacity, users} = room;\r\n    const usernameList = users.map(user => user.name);\r\n\r\n    const capacityStyle = users.length >= capacity ? {'backgroundColor': 'red'} : {'backgroundColor': 'green'}\r\n    return (\r\n        <div className=\"Room\">\r\n            <span id=\"title\">{name}</span> \r\n           \r\n           \r\n            <button id=\"join\"\r\n                onClick={onRoomJoin}\r\n            >\r\n            {children}\r\n            </button> \r\n            <span id=\"userlist\">\r\n                <HoverList\r\n                    list={usernameList}\r\n                > \r\n                    \r\n                    <span id =\"capacity\" style={capacityStyle}>\r\n                        {`${users.length}/${capacity}`}\r\n                    </span>   \r\n                </HoverList>\r\n            </span>\r\n        </div> \r\n    )\r\n}\r\n\r\nconst HoverList =({list, children}) => {\r\n    let key = 0;\r\n    return(\r\n        <div className=\"HoverList\">\r\n        <div className=\"HoverHitbox\">{children}</div>\r\n            <div className=\"HoverContent\">\r\n                {list.map(item => \r\n                    <li key ={key++}>{item}</li>    \r\n                )}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nclass CreateRoom extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            capacity: undefined\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {onCreateRoom, children} = this.props;\r\n        const {name, capacity} = this.state;\r\n        return (\r\n            <div className=\"CreateRoom\">\r\n                <form onSubmit={event => onCreateRoom(event, name, capacity)}>\r\n                    <input \r\n                        type=\"text\"\r\n                        onChange = {(event) => {\r\n                            this.setState({name: event.target.value});\r\n                        }}\r\n                        value={name}\r\n                        placeholder=\"Chat Room Name\"\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        onChange = {(event) => {\r\n                            this.setState({capacity: event.target.value});\r\n                        }}\r\n                        value={capacity}\r\n                        placeholder=\"Capacity\"\r\n                    />\r\n                    <button type=\"submit\">{children}</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Lobby;","import React, {Component} from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../css/App.css';\r\nimport Chat from './Chat';\r\nimport Lobby from './Lobby'\r\nconst socketIOClient = require('socket.io-client');\r\n\r\nclass App extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      joinedRooms : [],\r\n      user: {\r\n        name:'',\r\n        id: '' + Math.random()\r\n      },\r\n      usernameInput: ''\r\n    }\r\n\r\n    this.addRoom = this.addRoom.bind(this);\r\n    this.leaveRoom = this.leaveRoom.bind(this);\r\n    this.onUsernameSubmit = this.onUsernameSubmit.bind(this);\r\n    this.onUsernameChange = this.onUsernameChange.bind(this);\r\n  }\r\n\r\n  onUsernameSubmit(event){\r\n    event.preventDefault();\r\n    let newUser = {\r\n      name: this.state.usernameInput,\r\n      id: this.state.user.id\r\n    }\r\n    this.setState({user: newUser});\r\n  }\r\n\r\n  onUsernameChange(event){\r\n    this.setState({usernameInput: event.target.value});\r\n  }\r\n\r\n  addRoom(newRoom){\r\n    const {user} = this.state;\r\n    const isSameRoom = room => room.id === newRoom.id;\r\n    //Check if room already exists\r\n    const oldRooms = this.state.joinedRooms;\r\n    if(!oldRooms.find(isSameRoom)){\r\n      // Try to join if they have capacity\r\n      if(newRoom.users.length < newRoom.capacity){\r\n        console.log('Adding a new chat.');\r\n        const newRooms = [...oldRooms, newRoom];\r\n        this.setState({joinedRooms: newRooms});\r\n      }else{\r\n        console.log('Room was full.');\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  leaveRoom(targetRoom){\r\n    const isntSameRoom = room => room.id !== targetRoom.id;\r\n    const oldRooms = this.state.joinedRooms;\r\n    const newRooms = oldRooms.filter(isntSameRoom);\r\n    this.setState({joinedRooms: newRooms});\r\n  }\r\n\r\n\r\n  renderChat(room){\r\n    const {user} = this.state;\r\n    return (\r\n      <div key ={room.id} className=\"grid-item\">\r\n        <div>\r\n          <Chat\r\n            room={room}\r\n            user={user}\r\n            onLeaveRoom = {this.leaveRoom}\r\n          ></Chat>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderAllChats(){\r\n    const {joinedRooms: rooms} = this.state;\r\n    return (\r\n      <div className=\"AllChats\">\r\n            {rooms.map(room => this.renderChat(room))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const {user} = this.state;\r\n    if(!user.name){\r\n      return(\r\n        <div className=\"usernamePrompt\"> \r\n          <TextInput\r\n            onSubmit={this.onUsernameSubmit}\r\n            onChange={this.onUsernameChange}\r\n            placeholder=\"Choose your display name\"\r\n          >\r\n            Set Username\r\n          </TextInput>\r\n        </div>\r\n      )\r\n    }else{\r\n      return (\r\n        <div className=\"ChatGrid\">\r\n          <div className=\"grid-item\">\r\n            <Lobby\r\n              onRoomJoin={this.addRoom}\r\n            ></Lobby>\r\n          </div>\r\n          {this.renderAllChats()}\r\n        \r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\nconst TextInput = ({onSubmit, onChange, placeholder, children}) => {\r\n  return(\r\n    <form className=\"TextInput\" onSubmit={onSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder={placeholder}\r\n        onChange={onChange}\r\n      />\r\n      <button type=\"submit\">\r\n        {children}\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default App; ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nif(module.hot){\r\n    module.hot.accept();\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}