{"version":3,"sources":["logo.svg","Components/Chat.js","Components/Lobby.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","messages","typers","myHandle","myMessage","endpoint","onMessageReceived","bind","assertThisInitialized","onTypingReceived","onHandleBoxChange","onMessageBoxChange","onMessageBoxSubmit","onClientDisconnect","response","oldMessages","newMessages","concat","toConsumableArray","setState","newTypers","filter","typer","handle","typerHandle","console","log","oldTypers","indexOf","event","target","value","socket","emit","_this$state","text","preventDefault","_this2","socketIOClient","on","message","_this$state2","react_default","a","createElement","className","Chat_MessageDisplay","Chat_DynamicList","list","Chat_HandleBox","onChange","Chat_MessageBox","onSubmit","Component","MessageDisplay","map","item","key","id","MessageBox","_ref","children","type","HandleBox","_ref2","DynamicList","_ref3","connector","length","aList","asString","i","listToString","Lobby","rooms","onCreateRoom","name","capacity","window","alert","onRoomJoin","chatSocket","room","lobbySocket","roomList","Lobby_RoomList","Lobby_CreateRoom","RoomList","aRoom","Lobby_Room","Room","users","usernameList","user","capacityStyle","backgroundColor","onClick","Lobby_HoverList","style","HoverList","CreateRoom","_this3","undefined","_this4","_this$props","placeholder","App","require","joinedRooms","Math","random","usernameInput","addRoom","leaveRoom","onUsernameSubmit","onUsernameChange","newUser","newRoom","oldRooms","find","newRooms","targetRoom","Components_Chat","onLeaveRoom","renderChat","Components_Lobby","renderAllChats","App_TextInput","TextInput","Boolean","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5824cc4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {Component} from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport { arrayExpression } from '@babel/types';\r\n\r\nclass Chat extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            messages: [],\r\n            typers: [], \r\n            myHandle: \"\",\r\n            myMessage: \"\",\r\n            endpoint: \"/\"\r\n        }\r\n\r\n        this.onMessageReceived = this.onMessageReceived.bind(this);\r\n        this.onTypingReceived = this.onTypingReceived.bind(this);\r\n        this.onHandleBoxChange = this.onHandleBoxChange.bind(this);\r\n        this.onMessageBoxChange = this.onMessageBoxChange.bind(this);\r\n        this.onMessageBoxSubmit = this.onMessageBoxSubmit.bind(this);\r\n        this.onClientDisconnect = this.onClientDisconnect.bind(this);\r\n    }\r\n\r\n    // Add new message to list, and remove the message's handle from the typer list.\r\n    onMessageReceived(response){\r\n        const messageHandleMismatch = typer => response.handle !== typer;\r\n        \r\n        //Append message to the current list of messages. \r\n        const oldMessages = this.state.messages;\r\n        const newMessages = [...oldMessages, response]; \r\n        this.setState({messages: newMessages});\r\n\r\n        //Remove the sender from the typing list. \r\n        const oldTypers = this.state.typers;\r\n        const newTypers = oldTypers.filter(messageHandleMismatch);\r\n        this.setState({typers: newTypers});\r\n    }\r\n\r\n    onClientDisconnect(response){\r\n        const {handle} = response.handle;\r\n        // Remove the handle from the list of typers if they exist\r\n        const messageHandleMismatch = typer => response.handle !== typer;\r\n        const oldTypers = this.state.typers;\r\n        const newTypers = oldTypers.filter(messageHandleMismatch);\r\n        this.setState({typers: newTypers});\r\n    }\r\n\r\n    // Add the new typer handle to the typer list if they aren't there already. \r\n    onTypingReceived(typerHandle){\r\n        console.log('New typer: ' + typerHandle);\r\n        //Append the new typer to the list \r\n        const oldTypers = this.state.typers;\r\n        const newTypers = oldTypers.indexOf(typerHandle) === -1 ? [...oldTypers, typerHandle] : oldTypers;\r\n        this.setState({typers: newTypers});\r\n    }\r\n\r\n    // Update the state of my handle.\r\n    onHandleBoxChange(event){\r\n        console.log('Handle changing...');\r\n        this.setState({myHandle: event.target.value});\r\n    }\r\n\r\n    // Register self as a typer with the server\r\n    onMessageBoxChange(event){\r\n        console.log('Message changing...');\r\n        const {myHandle} = this.state;\r\n        this.socket.emit('typing', myHandle) // Typing event to be emitted to the other users\r\n        this.setState({myMessage: event.target.value});\r\n    }\r\n\r\n    // \r\n    onMessageBoxSubmit(event){\r\n        console.log('Sending message.');\r\n        const{myHandle, myMessage} = this.state;\r\n        this.socket.emit('message', {\r\n            text: myMessage,\r\n            handle: myHandle\r\n        });\r\n        this.setState({myMessage: \"\"});\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        const {endpoint} = this.state;\r\n\r\n        // Connect and define listeners\r\n        this.socket = socketIOClient(endpoint); \r\n        this.socket.on('message', (message) => { // Receiving a message\r\n            console.log(message);\r\n            this.onMessageReceived(message);\r\n        });\r\n        \r\n        this.socket.on('typing', (typer) => { // Receiving a new typer list\r\n            console.log('New typer '+ typer);\r\n            this.onTypingReceived(typer);\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const {messages, typers, myHandle, myMessage} = this.state;\r\n        return (\r\n            <div className=\"Chat\">\r\n                <h1>Slugchat</h1>\r\n                <MessageDisplay messages={messages} />\r\n                <DynamicList list={typers}/>\r\n                Enter your message: <br/> \r\n                <HandleBox value={myHandle} onChange={this.onHandleBoxChange}></HandleBox>\r\n                <MessageBox value={myMessage} onChange={this.onMessageBoxChange} onSubmit={this.onMessageBoxSubmit}>Send </MessageBox>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MessageDisplay extends Component{\r\n    \r\n    render(){\r\n        const {messages} = this.props;\r\n\r\n        return (\r\n            <div className=\"MessageDisplay\">\r\n                {messages.map(item => \r\n                    <div key={item.handle+\" \"+item.text}id=\"message\">\r\n                       <p> <span id=\"messageHandle\">{item.handle}: </span> <span id=\"messageText\">{item.text}</span> </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n    const MessageBox = ({value, onChange, onSubmit, children}) => {\r\n    return (\r\n        <form className=\"MessageBox\" onSubmit = {onSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                onChange={onChange}\r\n                value={value}\r\n            />\r\n            <button type = \"submit\">\r\n                {children}\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst HandleBox = ({value, onChange, children}) => {\r\n    return (\r\n        <input type=\"text\" className=\"HandleBox\" onChange={onChange} value={value}>{children}</input>\r\n    )\r\n}\r\n\r\nconst DynamicList = ({list}) => {\r\n    const listToString = (aList) => {\r\n        let asString = '';\r\n        if(aList.length === 0) return ''; \r\n        else{\r\n            for(let i = 0; i < aList.length-1; i ++){\r\n                asString += `${aList[i]}, `\r\n            }\r\n            asString += aList[aList.length-1];\r\n        }\r\n        return asString;\r\n    }\r\n\r\n    let connector = list.length > 1 ? 'are' : 'is';\r\n    return(\r\n        <div className=\"DynamicList\">\r\n            <p>\r\n                {list.length > 0 ? listToString(list) +` ${connector} typing...` : ''}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Chat;","import React, {Component} from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nclass Lobby extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n            rooms: [],\r\n            endpoint: '/'\r\n        }\r\n\r\n        this.onCreateRoom = this.onCreateRoom.bind(this);\r\n    }\r\n\r\n    onCreateRoom(event, name, capacity){\r\n        event.preventDefault();\r\n\r\n        if(!name || !capacity){\r\n            return;\r\n        }\r\n        if(capacity > 100 || capacity < 2){\r\n            window.alert('Capacity must be between 2 and 100');\r\n        }\r\n        console.log(name);\r\n        console.log(capacity);\r\n        const {onRoomJoin} = this.props;\r\n        // Tell server to create the room.\r\n        this.chatSocket.emit('createRoom', {\r\n            name: name,\r\n            capacity: capacity\r\n        });\r\n\r\n        this.chatSocket.on('newRoomReady', room => {\r\n            onRoomJoin(room);\r\n        });\r\n\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const {endpoint} = this.state;\r\n        \r\n        // Connect\r\n        this.lobbySocket = socketIOClient(endpoint + '/lobby');\r\n        this.chatSocket = socketIOClient(endpoint + '/chats');\r\n        \r\n        // Listen\r\n        this.lobbySocket.on('roomList', roomList => { // Reflect rooms stored on server.\r\n            console.log('Receiving room list...');\r\n            this.setState({rooms: roomList});\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const {onRoomJoin} = this.props;\r\n        return(\r\n            <div className=\"Lobby\">\r\n                <RoomList rooms={this.state.rooms} onRoomJoin={onRoomJoin}/>\r\n                <CreateRoom\r\n                    onCreateRoom = {this.onCreateRoom}\r\n                    \r\n                >\r\n                    Create Room\r\n                </CreateRoom>\r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\n\r\nconst RoomList = ({rooms, onRoomJoin}) => {\r\n    return (\r\n        <div className=\"RoomList\">\r\n            {\r\n                rooms.map(aRoom =>\r\n                    <Room key={aRoom.id} room={aRoom} onRoomJoin = {() => onRoomJoin(aRoom)}>\r\n                        Join\r\n                    </Room>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Room = ({room, onRoomJoin, children}) => {\r\n    const {name, capacity, users} = room;\r\n    const usernameList = users.map(user => user.name);\r\n\r\n    const capacityStyle = users.length >= capacity ? {'backgroundColor': 'red'} : {'backgroundColor': 'green'}\r\n    return (\r\n        <div className=\"Room\">\r\n            <span id=\"title\">{name}</span> \r\n           \r\n           \r\n            <button id=\"join\"\r\n                onClick={onRoomJoin}\r\n            >\r\n            {children}\r\n            </button> \r\n            <span id=\"userlist\">\r\n                <HoverList\r\n                    list={usernameList}\r\n                > \r\n                    \r\n                    <span id =\"capacity\" style={capacityStyle}>\r\n                        {`${users.length}/${capacity}`}\r\n                    </span>   \r\n                </HoverList>\r\n            </span>\r\n        </div> \r\n    )\r\n}\r\n\r\nconst HoverList =({list, children}) => {\r\n    let key = 0;\r\n    return(\r\n        <div className=\"HoverList\">\r\n        <div className=\"HoverHitbox\">{children}</div>\r\n            <div className=\"HoverContent\">\r\n                {list.map(item => \r\n                    <li key ={key++}>{item}</li>    \r\n                )}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nclass CreateRoom extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            capacity: undefined\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {onCreateRoom, children} = this.props;\r\n        const {name, capacity} = this.state;\r\n        return (\r\n            <div className=\"CreateRoom\">\r\n                <form onSubmit={event => onCreateRoom(event, name, capacity)}>\r\n                    <input \r\n                        type=\"text\"\r\n                        onChange = {(event) => {\r\n                            this.setState({name: event.target.value});\r\n                        }}\r\n                        value={name}\r\n                        placeholder=\"Chat Room Name\"\r\n                    />\r\n                    <input\r\n                        type=\"number\"\r\n                        onChange = {(event) => {\r\n                            this.setState({capacity: event.target.value});\r\n                        }}\r\n                        value={capacity}\r\n                        placeholder=\"Capacity\"\r\n                    />\r\n                    <button type=\"submit\">{children}</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Lobby;","import React, {Component} from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../css/App.css';\r\nimport Chat from './Chat';\r\nimport Lobby from './Lobby'\r\nconst socketIOClient = require('socket.io-client');\r\n\r\nclass App extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      joinedRooms : [],\r\n      user: {\r\n        name:'',\r\n        id: '' + Math.random()\r\n      },\r\n      usernameInput: ''\r\n    }\r\n\r\n    this.addRoom = this.addRoom.bind(this);\r\n    this.leaveRoom = this.leaveRoom.bind(this);\r\n    this.onUsernameSubmit = this.onUsernameSubmit.bind(this);\r\n    this.onUsernameChange = this.onUsernameChange.bind(this);\r\n  }\r\n\r\n  onUsernameSubmit(event){\r\n    event.preventDefault();\r\n    let newUser = {\r\n      name: this.state.usernameInput,\r\n      id: this.state.user.id\r\n    }\r\n    this.setState({user: newUser});\r\n  }\r\n\r\n  onUsernameChange(event){\r\n    this.setState({usernameInput: event.target.value});\r\n  }\r\n\r\n  addRoom(newRoom){\r\n    const {user} = this.state;\r\n    const isSameRoom = room => room.id === newRoom.id;\r\n    //Check if room already exists\r\n    const oldRooms = this.state.joinedRooms;\r\n    if(!oldRooms.find(isSameRoom)){\r\n      // Try to join if they have capacity\r\n      if(newRoom.users.length < newRoom.capacity){\r\n        console.log('Adding a new chat.');\r\n        const newRooms = [...oldRooms, newRoom];\r\n        this.setState({joinedRooms: newRooms});\r\n      }else{\r\n        console.log('Room was full.');\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  leaveRoom(targetRoom){\r\n    const isntSameRoom = room => room.id !== targetRoom.id;\r\n    const oldRooms = this.state.joinedRooms;\r\n    const newRooms = oldRooms.filter(isntSameRoom);\r\n    this.setState({joinedRooms: newRooms});\r\n  }\r\n\r\n\r\n  renderChat(room){\r\n    const {user} = this.state;\r\n    return (\r\n      <div key ={room.id} className=\"grid-item\">\r\n        <div>\r\n          <Chat\r\n            room={room}\r\n            user={user}\r\n            onLeaveRoom = {this.leaveRoom}\r\n          ></Chat>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderAllChats(){\r\n    const {joinedRooms: rooms} = this.state;\r\n    return (\r\n      <div className=\"AllChats\">\r\n            {rooms.map(room => this.renderChat(room))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const {user} = this.state;\r\n    if(!user.name){\r\n      return(\r\n        <div className=\"usernamePrompt\"> \r\n          <TextInput\r\n            onSubmit={this.onUsernameSubmit}\r\n            onChange={this.onUsernameChange}\r\n            placeholder=\"Choose your display name\"\r\n          >\r\n            Set Username\r\n          </TextInput>\r\n        </div>\r\n      )\r\n    }else{\r\n      return (\r\n        <div className=\"ChatGrid\">\r\n          <div className=\"grid-item\">\r\n            <Lobby\r\n              onRoomJoin={this.addRoom}\r\n            ></Lobby>\r\n          </div>\r\n          {this.renderAllChats()}\r\n        \r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\nconst TextInput = ({onSubmit, onChange, placeholder, children}) => {\r\n  return(\r\n    <form className=\"TextInput\" onSubmit={onSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder={placeholder}\r\n        onChange={onChange}\r\n      />\r\n      <button type=\"submit\">\r\n        {children}\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default App; ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nif(module.hot){\r\n    module.hot.accept();\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}